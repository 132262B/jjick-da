<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="app.jjickda.api.admin.repository.AdminRepository">

   <!-- 메인 카테고리 등록 -->
    <insert id="insertMainCategory">
        INSERT
          INTO TB_EXAM_MAIN_CATEGORY
             ( MAIN_CATEGORY_NAME
             , USE_STATUS
             , REG_IDX
             )
        VALUES
             ( #{addMainCategoryDto.mainCategoryName}
             , 1
             , #{user.idx}
             )
    </insert>

    <!-- 서브 카테고리 등록 -->
    <insert id="insertSubCategory">
        INSERT
          INTO TB_EXAM_SUB_CATEGORY
             ( MAIN_CATEGORY_IDX
             , SUB_CATEGORY_NAME
             , OPTIONS_CNT
             , EXAM_CUT_OFF_SCORE
             , USE_STATUS
             , REG_IDX
             )
        VALUES
             ( #{addSubCategoryDto.mainCategoryIdx}
             , #{addSubCategoryDto.subCategoryName}
             , #{addSubCategoryDto.optionsCnt}
             , #{addSubCategoryDto.examCutOffScore}
             , 1
             , #{user.idx}
             )
    </insert>

    <!-- 과목 등록 -->
    <insert id="insertSubject">
        INSERT
          INTO TB_EXAM_SUBJECT
        ( SUB_CATEGORY_IDX
        , SUBJECT_NAME
        , USE_STATUS
        , REG_IDX
        , SUBJECT_CUT_OFF_SCORE
        , SUBJECT_QUESTION_CNT
        ) VALUES
        ( #{addSubjectDto.subCategoryIdx}
        , #{addSubjectDto.subjectName}
        , 1
        , #{user.idx}
        , #{addSubjectDto.subjectCutOffScore}
        , #{addSubjectDto.subjectQuestionCnt}
        )
    </insert>

    <!-- 메인 카테고리 리스트 조회 -->
    <select id="selectMainCategoryList" resultType="getMainCategoryDto">
        SELECT
          E.MAIN_CATEGORY_NAME
        , E.IDX
        , E.USE_STATUS
        , E.REG_DATE
        , E.REG_IDX
        , E.UDT_DATE
        , E.UDT_IDX
        , U.NAME as REG_USER_NAME
        , IFNULL(USER.NAME,"없음") AS UDT_USER_NAME
        FROM TB_EXAM_MAIN_CATEGORY E
        LEFT JOIN TB_USER U
        ON E.REG_IDX = U.IDX
        LEFT JOIN TB_USER USER
        ON E.UDT_IDX = USER.IDX
        WHERE
        <choose>
            <when test="searchObject != null">
                E.MAIN_CATEGORY_NAME LIKE CONCAT('%',#{search},'%')
            </when>
            <otherwise>
                E.MAIN_CATEGORY_NAME LIKE '%%'
            </otherwise>
        </choose>
    </select>

    <!-- 키워드로 서브 카테고리 리스트 조회 -->
    <select id="selectSubCategoryListBySearch" resultType="getSubCategoryDto">
        SELECT
           E.IDX
         , E.SUB_CATEGORY_NAME
         , E.USE_STATUS
         , E.REG_DATE
         , E.REG_IDX
         , M.MAIN_CATEGORY_NAME
         , U.NAME AS REG_USER_NAME
          FROM TB_EXAM_SUB_CATEGORY E
          LEFT JOIN TB_USER U
            ON REG_IDX = U.IDX
          LEFT JOIN TB_EXAM_MAIN_CATEGORY M
            ON E.MAIN_CATEGORY_IDX = M.IDX
         WHERE
        <choose>
            <when test="sort.equals('main')">
            M.MAIN_CATEGORY_NAME LIKE CONCAT('%',#{search},'%')
            </when>
            <when test="sort.equals('sub')">
            E.SUB_CATEGORY_NAME LIKE CONCAT('%',#{search},'%')
            </when>
            <otherwise>
               M.MAIN_CATEGORY_NAME LIKE CONCAT('%',#{search},'%')
            OR E.SUB_CATEGORY_NAME LIKE CONCAT('%',#{search},'%')
            </otherwise>
        </choose>
    </select>

    <!-- mainIdx로 서브 카테고리 조회 -->
    <select id="selectSubCategoryListByMainIdx" resultType="getSubCategoryDto">
        select
         IDX
        ,SUB_CATEGORY_NAME
        FROM TB_EXAM_SUB_CATEGORY
        WHERE MAIN_CATEGORY_IDX = #{mainIdx}
    </select>

    <!-- subIdx로 서브 카테고리 디테일 조회 -->
    <select id="selectSubDetail" resultType="getSubCategoryDto">
        SELECT E.IDX
        , E.USE_STATUS
        , E.REG_DATE
        , E.UDT_DATE
        , U.NAME AS REG_USER_NAME
        , IFNULL(USER.NAME,"수정 없음") AS UDT_USER_NAME
        , COUNT(TES.IDX) AS SUBJECT_COUNT
        , M.MAIN_CATEGORY_NAME
        , E.SUB_CATEGORY_NAME
        FROM TB_EXAM_SUB_CATEGORY E
        LEFT JOIN TB_USER U
        ON REG_IDX = U.IDX
        LEFT JOIN TB_USER USER
        ON UDT_IDX = USER.IDX
        LEFT JOIN TB_EXAM_MAIN_CATEGORY M
        ON MAIN_CATEGORY_IDX = M.IDX
        LEFT JOIN TB_EXAM_SUBJECT TES
        ON E.IDX = TES.SUB_CATEGORY_IDX
        WHERE E.IDX = #{subIdx}
    </select>

    <!-- subIdx로 과목 리스트 조회 -->
    <select id="selectSubjectCategoryListBySubIdx" resultType="GetSubjectDto">
        SELECT
         S.IDX
        ,S.SUBJECT_NAME
        ,S.REG_DATE
        ,U.NAME AS regName
        FROM TB_EXAM_SUBJECT S
        LEFT JOIN TB_USER U
        ON S.REG_IDX = U.IDX
        WHERE S.SUB_CATEGORY_IDX = #{subIdx}
    </select>

    <!-- 시험 정보 등록 -->
    <insert id="insertExamInfo" useGeneratedKeys="true" keyProperty="examInfo.examIdx">
        INSERT
          INTO TB_EXAM
             ( MAIN_CATEGORY_IDX
             , SUB_CATEGORY_IDX
             , EXAM_NAME
             , REG_IDX
             , CONFIRM_STATUS
             ) VALUES
             ( #{examInfo.mainCategoryIdx}
             , #{examInfo.subCategoryIdx}
             , #{examInfo.examName}
             , #{user.idx}
             , 0
             )
    </insert>

    <!-- 시험문항 등록 -->
    <insert id="insertExamQuestions" useGeneratedKeys="true" keyProperty="question.questionIdx">
        INSERT
          INTO TB_EXAM_QUESTION
             ( EXAM_IDX
             , SUBJECT_IDX
             , MULTIMEDIA_IDX
             , QUESTION_NUMBER
             , QUESTION_NAME
             , ANSWER_NUMBER
             ) VALUES
             ( #{examInfo.examIdx}
             , #{question.subjectIdx}
             , #{question.multiMediaIdx}
             , #{question.questionNumber}
             , #{question.questionName}
             , #{question.answerNumber}
             )
    </insert>

    <!-- 문항선지 등록 -->
    <insert id="insertExamOptions">
        INSERT
          INTO TB_EXAM_OPTIONS
             ( QUESTION_IDX
             , OPTIONS_NUMBER
             , OPTIONS_CONTENT
             ) VALUES
            <foreach collection="options" item="item" index="index" separator=" , ">
             ( #{question.questionIdx}
             , #{item.optionNumber}
             , #{item.optionContent}
             )
            </foreach>
    </insert>

    <!-- subIdx로 선지개수 조회 -->
    <select id="selectOptionsCnt" resultType="int">
        SELECT OPTIONS_CNT
        FROM TB_EXAM_SUB_CATEGORY
        WHERE IDX = #{subIdx}
    </select>

    <!-- subIdx로 과목 정보 조회 -->
    <select id="selectSubjectInfo" resultType="subjectInformationDto">
        SELECT
         IDX as subjectIdx
        ,SUBJECT_NAME
        ,SUBJECT_QUESTION_CNT
        FROM TB_EXAM_SUBJECT
        WHERE SUB_CATEGORY_IDX = #{subIdx}
    </select>

    <!-- 키워드로 결재 대기중인 시험 조회 -->
    <select id="selectConfirmedExamList" resultType="UnconfirmedExamDto">
        SELECT
         E.IDX
        ,E.EXAM_NAME
        ,E.REG_DATE
        ,E.REG_IDX
        ,E.NAME AS regName
        FROM TB_EXAM E
        LEFT JOIN TB_USER U
        ON E.REG_IDX = U.IDX
        WHERE CONFIRM_STATUS = 0 AND
        <choose>
            <when test="searchObject != null">
                EXAM_NAME LIKE CONCAT('%',#{searchObject},'%')
            </when>
            <otherwise>
                EXAM_NAME LIKE '%%'
            </otherwise>
        </choose>
    </select>

    <!-- 시험 결재 -->
    <update id="updateConfirm">
        UPDATE TB_EXAM
        SET CONFIRM_STATUS = 1
        WHERE IDX = #{examIdx}
    </update>

</mapper>